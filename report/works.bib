@online{Shirley2024RTW1,
  title  = {Ray Tracing in One Weekend},
  author = {Peter Shirley, Trevor David Black, Steve Hollasch},
  year   = {2024},
  month  = {August},
  url    = {https://raytracing.github.io/books/RayTracingInOneWeekend.html}
}
@online{Shirley2024RTW2,
  title  = {Ray Tracing: The Next Week},
  author = {Peter Shirley, Trevor David Black, Steve Hollasch},
  year   = {2024},
  month  = {August},
  url    = {https://raytracing.github.io/books/RayTracingTheNextWeek.html}
}
@online{Shirley2024RTW3,
  title  = {Ray Tracing: The Rest of Your Life},
  author = {Peter Shirley, Trevor David Black, Steve Hollasch},
  year   = {2024},
  month  = {August},
  url    = {https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html}
}
@online{Nikolaus,
  title  = {Let's build a Raytracer},
  author = {Nikolaus Mayer},
  year   = {2019},
  url    = {https://hmthanh.github.io/raytracing/}
}
@book{Haines2019,
  title     = {Ray Tracing Gems},
  editor    = {Eric Haines and Tomas Akenine-M\"oller},
  publisher = {Apress},
  year      = {2019},
  note      = {\url{http://raytracinggems.com}}
}
@book{Marrs2021,
  title     = {Ray Tracing Gems II},
  editor    = {Adam Marrs, Peter Shirley, and Ingo Wald},
  publisher = {Apress},
  year      = {2021},
  note      = {\url{http://raytracinggems.com/rtg2}}
}
@misc{BibEntry2020Jun,
  title   = {{Casual Shadertoy Path Tracing 1: Basic Camera, Diffuse, Emissive}},
  journal = {blog at the bottom of the sea},
  author  = {Alan Wolfe},
  year    = {2020},
  month   = jun,
  note    = {[Online; accessed 25. Nov. 2024]},
  url     = {https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive}
}
@incollection{COLLANGE201299,
  title     = {Chapter 9 - Interval Arithmetic in CUDA},
  editor    = {Wen-mei W. Hwu},
  booktitle = {GPU Computing Gems Jade Edition},
  publisher = {Morgan Kaufmann},
  address   = {Boston},
  pages     = {99-107},
  year      = {2012},
  series    = {Applications of GPU Computing Series},
  isbn      = {978-0-12-385963-1},
  doi       = {https://doi.org/10.1016/B978-0-12-385963-1.00009-5},
  url       = {https://www.sciencedirect.com/science/article/pii/B9780123859631000095},
  author    = {Sylvain Collange and Marc Daumas and David Defour},
  abstract  = {Publisher Summary
               This chapter presents a simple, but powerful implementation of Interval arithmetic (IA) on CUDA graphics processing units (GPUs). Applications running on GPU systems can be considered as ill-conditioned, and no catastrophic or exceptional event may be blamed for computed results that fall too far from their target. One solution is to spend some of the impressive computing power offered by GPUs to compute a validated range for the results instead of the uncontrolled estimation delivered by regular floating-point arithmetic. Interval arithmetic (IA) accounts for uncertainties in data at operator level and returns reliable bounds that include the correct result of an expression. The basic principle of IA is to replace approximate floating-point numbers by intervals enclosing the results. Expressions and programs are then evaluated on intervals instead of points. Naive use of IA often provides very little insights, but common techniques of IA are profitably used in computer graphics (including ray tracing of implicit surfaces), root finding, and in various other fields to estimate and reduce the effects of rounding errors and characterize tolerance on parameters. This chapter also describes the procedure to implement IA in CUDA and take advantage of the latest features of NVIDIA GPUs. The proposed implementation is easier to use than an equivalent CPU implementation such as the Boost Interval package as there is no need to deal with different executions mode, and it is faster and more work efficient as it increases arithmetic intensity.}
}